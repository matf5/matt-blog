(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{332:function(t,e,a){"use strict";a.r(e);var r=a(14),c=Object(r.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"vue是如何实现响应式的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue是如何实现响应式的"}},[t._v("#")]),t._v(" vue是如何实现响应式的")]),t._v(" "),e("p",[t._v("使用双向绑定的模式\nvue2是通过defineProperty劫持对象的set和get属性\n在get数据的时候, 收集订阅者, 触发watcher的依赖收集, set数据时会发布更新,  通知watcher\n"),e("img",{attrs:{src:"https://raw.githubusercontent.com/matf5/fileCache/master/20240424172405.png",alt:"20240424172405"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/matf5/fileCache/master/20240424172251.png",alt:"20240424172251"}})]),t._v(" "),e("h2",{attrs:{id:"watcher"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#watcher"}},[t._v("#")]),t._v(" watcher")]),t._v(" "),e("ol",[e("li",[t._v("观察模版中的水")]),t._v(" "),e("li",[t._v("watch选项中的数据")]),t._v(" "),e("li",[t._v("computed的数据")]),t._v(" "),e("li",[t._v("手动调用$watch API观察的数据或表达式")])]),t._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),e("p",[t._v("Vue 的响应式原理的核心就是观察这些数据的变化，当这些数据发生变化以后，能通知到对应的观察者以实现相关的逻辑。整个响应式原理最核心的实现就是 Dep 类，这个类实际上是连接数据与观察者的桥梁。")]),t._v(" "),e("p",[t._v("在 Vue 初始化阶段，会对配置对象中定义的不同属性做相关的处理，对于 data 和 props 而言，Vue 会通过 observe 和 defineReactive 等一系列的操作把 data 和 props 的每个属性变成响应式属性，同时它们内部会持有一个 Dep 实例对象，当我们访问这些数据的时候，就会触发 dep 的 depend 方法来收集依赖，这些依赖是当前正在计算的 Watcher，当前在计算的依赖也就是 Dep.target，作为 Subscriber 订阅者用于订阅这些数据的变化。当修改数据的时候，会触发 dep 的 notify 方法通知这些订阅者执行 update 的逻辑。")]),t._v(" "),e("p",[t._v("对于 computed 计算属性而言，实际上会在内部创建一个 computed watcher，每个 computed watcher 会持有一个 Dep 实例，当我们访问 computed 属性的时候，会调用 computed watcher 的 evaluate 方法，这时候会触发其持有的 depend 方法用于收集依赖，同时也会收集到正在计算的 watcher，然后把它计算的 watcher 作为 Dep 的 Subscriber 订阅者收集起来，收集起来的作用就是当计算属性所依赖的值发生变化以后，会触发 computed watcher 重新计算，如果重新计算过程中计算结果变了也会调用 dep 的 notify 方法，然后通知订阅 computed 的订阅者触发相关的更新。")]),t._v(" "),e("p",[t._v("对于 watch 而言，会创建一个 user watcher，可以理解为用户的 watcher，也就是用户自定义的一些 watch，它可以观察 data 的变化，也可以观察 computed 的变化。当这些数据发生变化以后，我们创建的这个 watcher 去观察某个数据或计算属性，让他们发生变化就会通知这个 Dep 然后调用这个 Dep 去遍历所有 user watchers，然后调用它们的 update 方法，然后求值发生新旧值变化就会触发 run 执行用户定义的回调函数（user callback）。")]),t._v(" "),e("p",[t._v("Vue 的渲染都是基于这个响应式系统的。在 Vue 的创建过程中，对于每个组件而言，它都会执行组件的 $mount 方法，$mount 执行过程中内部会创建唯一的 render watcher，该 render watcher 会在 render 也就是创建 VNode 过程中会访问到定义的 data、props 或者 computed 等等。render watcher 相当于订阅者，订阅了这些定义的数据的变化，一旦它们发生变化以后，就会触发例如 setter 里的 notify 或者 computed watcher 中的 dep.notify，从而触发 render watcher 的 update，然后执行其 run 方法，执行过程中最终会调用 updateComponent 的方法，该方法会重新进行视图渲染。")]),t._v(" "),e("h2",{attrs:{id:"不足"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不足"}},[t._v("#")]),t._v(" 不足")]),t._v(" "),e("ol",[e("li",[t._v("无法监控对象的增山")]),t._v(" "),e("li",[t._v("数组的修改")])]),t._v(" "),e("h1",{attrs:{id:"vue3响应式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue3响应式"}},[t._v("#")]),t._v(" vue3响应式")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/matf5/fileCache/master/20240424172614.png",alt:"20240424172614"}})])])}),[],!1,null,null,null);e.default=c.exports}}]);