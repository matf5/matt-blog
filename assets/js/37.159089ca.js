(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{318:function(t,e,a){"use strict";a.r(e);var i=a(14),_=Object(i.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"react-native-bridge原理探究"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-native-bridge原理探究"}},[t._v("#")]),t._v(" react-native bridge原理探究")]),t._v(" "),e("h2",{attrs:{id:"背景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[t._v("#")]),t._v(" 背景")]),t._v(" "),e("p",[t._v("前文\n"),e("a",{attrs:{href:"https://juejin.cn/post/7007638934301704223",target:"_blank",rel:"noopener noreferrer"}},[t._v("react-native启动原理探究（Android）"),e("OutboundLink")],1),t._v(" 提到了在rn在初始化的过程中会调用bridge初始化相关的流程，解析来我们就分析bridge是如何初始化的，以及js与native的相互调用")]),t._v(" "),e("h2",{attrs:{id:"bridge初始化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bridge初始化"}},[t._v("#")]),t._v(" bridge初始化")]),t._v(" "),e("h3",{attrs:{id:"整体流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#整体流程"}},[t._v("#")]),t._v(" 整体流程")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646488.jpg",alt:""}})]),t._v(" "),e("p",[t._v("前面在启动流程中分析到，在java层的"),e("code",[t._v("CatalysInstnaceImpl")])]),t._v(" "),e("p",[t._v("中会调用"),e("code",[t._v("initializeBridge")]),t._v("方法以及C++层"),e("code",[t._v("bindBridge")])]),t._v(" "),e("p",[t._v("方法，接下来我们就看看这两个方法做了什么")]),t._v(" "),e("h3",{attrs:{id:"initializebridge"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#initializebridge"}},[t._v("#")]),t._v(" initializeBridge")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646489.png",alt:""}})]),t._v(" "),e("p",[t._v("该方法实际上是调用原生c++的方法，同时这里会将原生的模块传下去以及调用js的回调传下去")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646490.png",alt:""}})]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646491.png",alt:""}})]),t._v(" "),e("p",[t._v("这里主要是将几种原生模块统一用"),e("code",[t._v("moduleRegistry")]),t._v("注册，再交由instance去统一初始化，")]),t._v(" "),e("p",[t._v("这里的原生模块会通过"),e("code",[t._v("JavaModuleWrapper")]),t._v("去封装，后面会提到这里，先记住"),e("code",[t._v("mMethods")]),t._v("和"),e("code",[t._v("mDescs")])]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646492.png",alt:""}})]),t._v(" "),e("p",[t._v("继续看intializeBridge做了什么")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646493.png",alt:""}})]),t._v(" "),e("p",[t._v("最终调用的是的jsiexcutor的方法")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646494.png",alt:""}})]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646495.png",alt:""}})]),t._v(" "),e("p",[t._v("这里设置了三个变量")]),t._v(" "),e("ol",[e("li",[t._v("nativeModuleProxy 记录了原生的模块")]),t._v(" "),e("li",[t._v("nativeFlushQueueImmediate 提供js调用的方法")]),t._v(" "),e("li",[t._v("nativeCallSyncHook 同步调用。属于jsi的方法")])]),t._v(" "),e("p",[t._v("这些方法我们后面实际调用的时候再分析")]),t._v(" "),e("p",[t._v("然后继续看bindBridge做了什么")]),t._v(" "),e("h3",{attrs:{id:"bindbridge"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bindbridge"}},[t._v("#")]),t._v(" bindBridge")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646496.png",alt:""}})]),t._v(" "),e("p",[t._v("这里是将bachedBrdige中的几个函数方法绑定到native中，先不管这几个方法主要是干什么的")]),t._v(" "),e("p",[t._v("那么batchBrdige又是什么时候引入的")]),t._v(" "),e("p",[t._v("这时候我们从RN应用入口文件中的appRegistry找到对batchedBridge的引用")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646497.png",alt:""}})]),t._v(" "),e("p",[t._v("同时BatchedBridge内部主要干了两件事")]),t._v(" "),e("ol",[e("li",[t._v("实例化一个新的messageQueue")]),t._v(" "),e("li",[t._v("将自身绑定到全局变量伤的__fbBatchedBridge，所以bindBridge那里才可以找到")])]),t._v(" "),e("p",[t._v("在messageQueue中我们找到了刚刚绑定的那两个函数")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646498.png",alt:""}})]),t._v(" "),e("p",[t._v("再回顾一下流程\n"),e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646488.jpg",alt:""}}),t._v("\n实际上主要就是这几步：")]),t._v(" "),e("ol",[e("li",[e("p",[e("code",[t._v("CatalysInstanceImpl")]),t._v("注册了"),e("code",[t._v("NativeModuleRegistry")]),t._v("以及"),e("code",[t._v("JSmoduleResgistry")]),t._v("后，调用"),e("code",[t._v("initialBrdige")]),t._v("方法，将注册表穿过去")])]),t._v(" "),e("li",[e("p",[t._v("然后在C++这一层的主要作用就是进行绑定，分别把Native注册的模块暴露给js，以及"),e("code",[t._v("messageQueue")]),t._v("中的方法暴露给Native")])]),t._v(" "),e("li",[e("p",[t._v("前面在加载bundle的时候会引用"),e("code",[t._v("AppResgitry")]),t._v("，"),e("code",[t._v("AppRegistry")]),t._v("就把"),e("code",[t._v("batchBridge")]),t._v("初始化了")])])]),t._v(" "),e("h2",{attrs:{id:"js调用native"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js调用native"}},[t._v("#")]),t._v(" js调用native")]),t._v(" "),e("h3",{attrs:{id:"一个官方的demo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一个官方的demo"}},[t._v("#")]),t._v(" 一个官方的demo")]),t._v(" "),e("p",[t._v("Android端设置模块，并且暴露show方法，以及常量\n"),e("img",{attrs:{src:"https://gitee.com/matf5/file-cache/raw/master/image/picgo/20210915142258.png",alt:""}})]),t._v(" "),e("p",[t._v("JS端直接引用\n"),e("img",{attrs:{src:"https://gitee.com/matf5/file-cache/raw/master/image/picgo/20210915142509.png",alt:""}}),t._v("\n利用官方的demo我们从源码进行分析")]),t._v(" "),e("h3",{attrs:{id:"整体流程-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#整体流程-2"}},[t._v("#")]),t._v(" 整体流程")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646499.jpg",alt:""}})]),t._v(" "),e("p",[t._v("在BatchBridge/NativeModules中看到")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646500.png",alt:""}})]),t._v(" "),e("p",[t._v("nativeModules会被赋值成global.nativeModuleProxy")]),t._v(" "),e("p",[t._v("回顾一下之前初始化bridge， 就有设置这个全局变量")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646501.png",alt:""}})]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646502.png",alt:""}})]),t._v(" "),e("p",[t._v("最终根据调用链路找到了"),e("code",[t._v("createModule")])]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646503.png",alt:""}})]),t._v(" "),e("p",[t._v("createModule这里主要做了三件事：")]),t._v(" "),e("ol",[e("li",[t._v("从全局这里获取 '__fbGenNativeModule'")]),t._v(" "),e("li",[t._v("对其进行调用，入参需要从moduleRegitry中的getConfig获取")]),t._v(" "),e("li",[t._v("获取他的module")])]),t._v(" "),e("p",[t._v("实际上__fbGenNativeModule是在nativeModule.js中放置的")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646504.png",alt:""}})]),t._v(" "),e("p",[t._v("我们先看看从moduleRegistry中的"),e("code",[t._v("getConfig")]),t._v("获取的参数")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646505.png",alt:""}})]),t._v(" "),e("p",[t._v("getConfig主要两步，")]),t._v(" "),e("ol",[e("li",[t._v("获取JAVA暴露的常量")]),t._v(" "),e("li",[t._v("通过getMethods去获取要暴露的方法")])]),t._v(" "),e("p",[t._v("这里有一个调用链路 getMethods → getMethodDescriptors → findMethods")]),t._v(" "),e("p",[t._v("最终调用到java层"),e("code",[t._v("JavaModuleWrapper")]),t._v("的"),e("code",[t._v("findMethods")])]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646506.png",alt:""}})]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646507.png",alt:""}})]),t._v(" "),e("p",[t._v("这里主要就是获取我们通过装饰器定义好的方法，同时获取方法的名称，以及类型，并且将他存到mMethods里面")]),t._v(" "),e("p",[t._v("另一方面是把函数的描述信息存到"),e("code",[t._v("mDescs")]),t._v("里面，这个会返回给C++, 因为就是刚刚那个"),e("code",[t._v("getConfig")]),t._v("调用的（往上拖半页）")]),t._v(" "),e("p",[t._v("综上 "),e("code",[t._v("getConfig")]),t._v("可以获取到我们定义好的模块的函数信息，以及常量信息。")]),t._v(" "),e("p",[t._v("然后会将获取到的信息传入到js的genModule中")]),t._v(" "),e("p",[t._v("继续看genModule")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646508.png",alt:""}})]),t._v(" "),e("p",[t._v("这里是比较熟悉的js代码了")]),t._v(" "),e("p",[t._v("主要作用就是从刚刚获取到的配置来调用genMethod去生成调用的方法，并把方法存储起来，使得在js调用的时候，能够通过模块名索引找到")]),t._v(" "),e("p",[t._v("然后当我们真正的调用ToastModule.show时，就会触发到这里的流程了，会通过Toastmodule, show 这两个索引获取到对应的moduleId, methodId, 去调用genMethod生成的函数")]),t._v(" "),e("p",[t._v("继续看genMethod做了什么")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646509.png",alt:""}})]),t._v(" "),e("p",[t._v("这里主要作用就是根据函数的不同类型去生成不同的方法")]),t._v(" "),e("p",[t._v("最终都是会调用")]),t._v(" "),e("p",[e("code",[t._v("enqueueNativeCall")])]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646510.png",alt:""}})]),t._v(" "),e("p",[t._v("这里主要有几件事：")]),t._v(" "),e("ol",[e("li",[t._v("存储回调")]),t._v(" "),e("li",[t._v("将要调用的模块、方法与参数信息放进队列里")]),t._v(" "),e("li",[t._v("调用了之前initBridge设置的全局变量nativeFlushQueueImmediate，然后5秒钟以内不会进行重复发送")])]),t._v(" "),e("p",[t._v("回过头继续看刚刚这里设置的全局变量做了什么")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646511.png",alt:""}})]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646512.png",alt:""}})]),t._v(" "),e("p",[t._v("这里就用到了"),e("code",[t._v("ModuleRegistry")]),t._v("中的"),e("code",[t._v("callNativeMethod")])]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646513.png",alt:""}})]),t._v(" "),e("p",[t._v("最终这里实际上是根据"),e("code",[t._v("moduleId")]),t._v("找到"),e("code",[t._v("JavaModuleWrapper")]),t._v("的"),e("code",[t._v("invoke")]),t._v("方法")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646514.png",alt:""}})]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646515.png",alt:""}})]),t._v(" "),e("p",[t._v("这里由于之前已经把所有暴露的方法存到"),e("code",[t._v("mMethods")]),t._v("里面了，所以这里能够通过"),e("code",[t._v("methodId")]),t._v("找到方法，利用invoke调用，并把参数传进去")]),t._v(" "),e("p",[t._v("再回顾一下流程")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646499.jpg",alt:""}})]),t._v(" "),e("p",[t._v("总结为：")]),t._v(" "),e("ol",[e("li",[t._v("js代码调用nativeModule.js")]),t._v(" "),e("li",[t._v("实际上被代理到了global.nativeModuleProxy")]),t._v(" "),e("li",[t._v("而这里调用了getModule去获取模块信息, 最终获取到模块的信息，有模块名，模块id，常量，方法名")]),t._v(" "),e("li",[t._v("实际上模块信息是从存储注册的信息中取到的")]),t._v(" "),e("li",[t._v("这时候交给messageQueue去生成调用的方法")]),t._v(" "),e("li",[t._v("生成调用的方法主要是通过队列存储的形式每隔5秒利用nativeFlushImmediate去调用c++层")]),t._v(" "),e("li",[t._v("接着会调用callNativeModule\n从注册的模块信息中找到对应的invoke方法进行调用")])]),t._v(" "),e("h2",{attrs:{id:"native调用js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#native调用js"}},[t._v("#")]),t._v(" Native调用js")]),t._v(" "),e("h3",{attrs:{id:"整体流程-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#整体流程-3"}},[t._v("#")]),t._v(" 整体流程")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646516.png",alt:""}})]),t._v(" "),e("p",[t._v("接下来分析native调用js")]),t._v(" "),e("p",[t._v("前面在启动流程的有提到最终是这样子调用去运行js函数的")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646517.png",alt:""}})]),t._v(" "),e("p",[t._v("这里AppRegistry是在android端写的一个类")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646518.png",alt:""}})]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646519.png",alt:""}})]),t._v(" "),e("p",[t._v("getJSModule实际上是调用的JSModuleRegistry的getJavaScriptModule函数")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646520.png",alt:""}})]),t._v(" "),e("p",[t._v("这里利用JAVA proxy构造了一个新的对象")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646521.png",alt:""}})]),t._v(" "),e("p",[t._v("调用了CatalystInstance的callFunction方法")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646522.png",alt:""}})]),t._v(" "),e("p",[t._v("最终通过 CatalystInstanceImpl::jniCallJSFunction  -> Instance::callJSFunction → nativeToJSbridge → excutor::callFunction")]),t._v(" "),e("p",[t._v("一系列调用链路异步调用了excutor的callFunction方法")]),t._v(" "),e("p",[t._v("最终是调用的executor")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646523.png",alt:""}})]),t._v(" "),e("p",[t._v("在这里又碰到一个熟悉的变量了。之前在bindBridge就提到过。这个函数实际上存的messageQueue中的函数")]),t._v(" "),e("p",[t._v("这里主要有两步：")]),t._v(" "),e("ol",[e("li",[t._v("调用函数")]),t._v(" "),e("li",[t._v("结果回调native模块")])]),t._v(" "),e("p",[t._v("去messageQueue里查看")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646524.png",alt:""}})]),t._v(" "),e("p",[t._v("主要有两步：")]),t._v(" "),e("ol",[e("li",[t._v("根据注册的模块和函数调用函数")]),t._v(" "),e("li",[t._v("刷新队列，并将队列返回")])]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646525.png",alt:""}})]),t._v(" "),e("p",[t._v("这里就是调用apply方法简单粗暴")]),t._v(" "),e("p",[t._v("因此总结如下：")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://matf5.gitee.io/matt-blog/image/rn_brdige/710646526.jpg",alt:""}})]),t._v(" "),e("ol",[e("li",[t._v("在reactContext中调用getJSMdule方法，传入编写好的类（要对应js模块的方法）")]),t._v(" "),e("li",[t._v("利用proxy invoke出一个函数调用")]),t._v(" "),e("li",[t._v("调用callFunction传参")]),t._v(" "),e("li",[t._v("在c++层利用预先设置好的callFunctionReturnFlushedQueue去调用messgeQueue中的方法")]),t._v(" "),e("li",[t._v("根据模块和函数id找到具体的函数并执行")])]),t._v(" "),e("p",[t._v("参考资料：")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/sucese/react-native/blob/master/doc/ReactNative%E6%BA%90%E7%A0%81%E7%AF%87/6ReactNative%E6%BA%90%E7%A0%81%E7%AF%87%EF%BC%9A%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("ReactNative源码篇：通信机制"),e("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=_.exports}}]);