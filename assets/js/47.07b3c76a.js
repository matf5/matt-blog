(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{328:function(v,t,_){"use strict";_.r(t);var e=_(14),s=Object(e.a)({},(function(){var v=this,t=v._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"vue-中使用-tsx-的深度剖析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-中使用-tsx-的深度剖析"}},[v._v("#")]),v._v(" Vue 中使用 TSX 的深度剖析")]),v._v(" "),t("p",[v._v("在 Vue 的生态中，是否选择使用 TSX (或 JSX) 而不是传统的模板语法（SFC, Single File Component），是一个常见的技术探讨话题。这并非一个简单的“好”与“坏”的判断，而是一个基于具体场景的"),t("strong",[v._v("权衡与取舍")]),v._v("。")]),v._v(" "),t("p",[v._v("本文将从优缺点、Vue 2 与 Vue 3 的差异，以及常见的面试问题三个方面，深入剖析在 Vue 中使用 TSX 的方方面面。")]),v._v(" "),t("hr"),v._v(" "),t("h2",{attrs:{id:"_1-vue-中使用-tsx-的优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-vue-中使用-tsx-的优缺点"}},[v._v("#")]),v._v(" 1. Vue 中使用 TSX 的优缺点")]),v._v(" "),t("h3",{attrs:{id:"优点-advantages"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优点-advantages"}},[v._v("#")]),v._v(" 优点 (Advantages)")]),v._v(" "),t("h4",{attrs:{id:"a-终极的灵活性-ultimate-flexibility"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#a-终极的灵活性-ultimate-flexibility"}},[v._v("#")]),v._v(" a. 终极的灵活性 (Ultimate Flexibility)")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("完整的编程能力")]),v._v(": 你可以直接在渲染逻辑中使用 JavaScript/TypeScript 的所有原生语法，如 "),t("code",[v._v("if/else")]),v._v("、"),t("code",[v._v("switch")]),v._v("、"),t("code",[v._v("map")]),v._v("、"),t("code",[v._v("reduce")]),v._v(" 等，而无需学习 "),t("code",[v._v("v-if")]),v._v(", "),t("code",[v._v("v-for")]),v._v(" 等特定的模板指令。这在处理非常复杂的动态渲染逻辑时尤其强大。")]),v._v(" "),t("li",[t("strong",[v._v("动态组件与高阶组件 (HOCs)")]),v._v(": TSX 使得创建高阶组件或根据条件动态渲染不同类型的组件变得非常直接和简单，其逻辑表达比使用 "),t("code",[v._v('<component :is="...">')]),v._v(" 更加清晰。")])]),v._v(" "),t("h4",{attrs:{id:"b-与类型系统的深度集成-deep-type-system-integration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#b-与类型系统的深度集成-deep-type-system-integration"}},[v._v("#")]),v._v(" b. 与类型系统的深度集成 (Deep Type System Integration)")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("核心优势")]),v._v(": TSX 本质上就是 TypeScript。这意味着你的 props、事件、插槽都可以获得无缝且强大的类型推导和编译时检查。")]),v._v(" "),t("li",[t("strong",[v._v("类型精确性")]),v._v(": 虽然现代的 Vue 工具链（如 Volar）已经极大地改善了模板的类型支持，但在处理复杂的泛型组件或作用域插槽的 props 时，模板的类型推导有时仍可能遇到瓶颈。TSX 从语言层面根本性地解决了这个问题。")])]),v._v(" "),t("h4",{attrs:{id:"c-更易于重构和抽象-easier-to-refactor-abstract"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#c-更易于重构和抽象-easier-to-refactor-abstract"}},[v._v("#")]),v._v(" c. 更易于重构和抽象 (Easier to Refactor & Abstract)")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("遵循标准")]),v._v(": 组件内的逻辑抽取和重构完全遵循标准的 TS/JS 语法，能够得到 IDE 最完善的支持。你可以轻松地将一段复杂的 JSX 结构抽离成一个独立的函数进行复用，而模板的复用则更多地依赖于组件或插槽。")])]),v._v(" "),t("h4",{attrs:{id:"d-对-react-开发者友好-friendly-to-react-developers"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#d-对-react-开发者友好-friendly-to-react-developers"}},[v._v("#")]),v._v(" d. 对 React 开发者友好 (Friendly to React Developers)")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("心智模型一致")]),v._v(": 对于有 React 开发背景的开发者而言，TSX 的学习成本几乎为零，心智模型可以平滑迁移。")])]),v._v(" "),t("h3",{attrs:{id:"缺点-disadvantages"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缺点-disadvantages"}},[v._v("#")]),v._v(" 缺点 (Disadvantages)")]),v._v(" "),t("h4",{attrs:{id:"a-失去-vue-特有的语法糖-loss-of-vue-specific-syntax-sugar"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#a-失去-vue-特有的语法糖-loss-of-vue-specific-syntax-sugar"}},[v._v("#")]),v._v(" a. 失去 Vue 特有的语法糖 (Loss of Vue-specific Syntax Sugar)")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("指令缺失")]),v._v(": "),t("code",[v._v("v-model")]),v._v(", "),t("code",[v._v("v-show")]),v._v(", "),t("code",[v._v("v-if")]),v._v(", "),t("code",[v._v("v-for")]),v._v(" 等这些在模板中非常简洁高效的指令都无法直接使用，需要用原生 JSX 的方式去“模拟”。\n"),t("ul",[t("li",[t("code",[v._v("v-if")]),v._v(" -> "),t("code",[v._v("{condition && <div/>}")])]),v._v(" "),t("li",[t("code",[v._v("v-model")]),v._v(" -> 手动传递 "),t("code",[v._v("value")]),v._v(" 和 "),t("code",[v._v("onChange")]),v._v(" 事件")])])]),v._v(" "),t("li",[t("strong",[v._v("修饰符缺失")]),v._v(": 如 "),t("code",[v._v(".prevent")]),v._v(", "),t("code",[v._v(".stop")]),v._v(", "),t("code",[v._v(".lazy")]),v._v(" 这类便捷的事件和 "),t("code",[v._v("v-model")]),v._v(" 修饰符也无法使用，需要开发者手动实现其逻辑。")])]),v._v(" "),t("h4",{attrs:{id:"b-代码更啰嗦-more-verbose"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#b-代码更啰嗦-more-verbose"}},[v._v("#")]),v._v(" b. 代码更啰嗦 (More Verbose)")]),v._v(" "),t("ul",[t("li",[v._v("对于简单的场景，JSX 往往比模板需要编写更多的代码。例如，一个简单的 "),t("code",[v._v("v-for")]),v._v(" 循环，在模板中一行就能解决，而用 JSX 则需要写成 "),t("code",[v._v("items.map(item => <div key={item.id}>{item.name}</div>)")]),v._v("。")])]),v._v(" "),t("h4",{attrs:{id:"c-scoped-css-的割裂感-scoped-css-disconnection"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#c-scoped-css-的割裂感-scoped-css-disconnection"}},[v._v("#")]),v._v(" c. Scoped CSS 的割裂感 (Scoped CSS Disconnection)")]),v._v(" "),t("ul",[t("li",[v._v("在 SFC ("),t("code",[v._v(".vue")]),v._v(" 文件) 中，"),t("code",[v._v("<style scoped>")]),v._v(" 提供了一种非常优雅且隔离良好的组件级样式方案。但在 "),t("code",[v._v(".tsx")]),v._v(" 文件中，你无法使用这个特性，必须转而依赖 CSS Modules, CSS-in-JS 等外部方案，这无疑增加了工程的复杂性。")])]),v._v(" "),t("h4",{attrs:{id:"d-心智模型转换-mental-model-shift"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#d-心智模型转换-mental-model-shift"}},[v._v("#")]),v._v(" d. 心智模型转换 (Mental Model Shift)")]),v._v(" "),t("ul",[t("li",[v._v("Vue 的设计哲学是“HTML 优先”，它对 HTML 的扩展是自然且直观的。而 JSX 的哲学是“JavaScript 优先”，它将 HTML 视作 JavaScript 的一部分。对于长期使用 Vue 模板的开发者来说，这需要一个心智模型的转变。")])]),v._v(" "),t("hr"),v._v(" "),t("h2",{attrs:{id:"_2-vue-2-vs-vue-3-tsx-支持的演进"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-vue-2-vs-vue-3-tsx-支持的演进"}},[v._v("#")]),v._v(" 2. Vue 2 vs Vue 3：TSX 支持的演进")]),v._v(" "),t("p",[v._v("Vue 2 和 Vue 3 对 TSX 的支持存在"),t("strong",[v._v("根本性")]),v._v("的差异，这主要源于它们底层数据响应式系统和组件 API 的不同（Options API vs Composition API）。")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",{attrs:{align:"left"}},[v._v("特性")]),v._v(" "),t("th",{attrs:{align:"left"}},[v._v("Vue 2 + TSX")]),v._v(" "),t("th",{attrs:{align:"left"}},[v._v("Vue 3 + TSX")])])]),v._v(" "),t("tbody",[t("tr",[t("td",{attrs:{align:"left"}},[t("strong",[v._v("核心原理")])]),v._v(" "),t("td",{attrs:{align:"left"}},[v._v("最初基于 "),t("code",[v._v("@vue/babel-preset-jsx")]),v._v(" 实现，与 Options API 结合。但自 "),t("strong",[v._v("Vue 2.7")]),v._v(" 起，官方内置了 Composition API，使其可以像 Vue 3 一样在 "),t("code",[v._v("setup")]),v._v(" 函数中组织逻辑，"),t("strong",[v._v("不再强依赖 `this`")]),v._v("。")]),v._v(" "),t("td",{attrs:{align:"left"}},[v._v("作为"),t("strong",[v._v("一等公民")]),v._v("进行支持。与 Composition API 完美结合，逻辑在 "),t("code",[v._v("setup")]),v._v(" 函数中组织，完全不依赖 "),t("code",[v._v("this")]),v._v("。")])]),v._v(" "),t("tr",[t("td",{attrs:{align:"left"}},[t("strong",[v._v("状态和逻辑")])]),v._v(" "),t("td",{attrs:{align:"left"}},[v._v("在 Options API 模式下，数据和方法需从 "),t("code",[v._v("this")]),v._v(" 读取。在 "),t("strong",[v._v("Vue 2.7+ 的 Composition API")]),v._v(" 模式下，则通过 "),t("code",[v._v("setup")]),v._v(" 函数和 "),t("code",[v._v("ref")]),v._v("、"),t("code",[v._v("reactive")]),v._v(" 管理状态，逻辑更内聚。")]),v._v(" "),t("td",{attrs:{align:"left"}},[v._v("状态通过 "),t("code",[v._v("ref")]),v._v("、"),t("code",[v._v("reactive")]),v._v(" 创建，逻辑在 "),t("code",[v._v("setup")]),v._v(" 中定义。代码组织更聚合，更易于复用。")])]),v._v(" "),t("tr",[t("td",{attrs:{align:"left"}},[t("strong",[t("code",[v._v("v-model")]),v._v(" 实现")])]),v._v(" "),t("td",{attrs:{align:"left"}},[t("strong",[v._v("相对复杂")]),v._v("。需要手动处理 "),t("code",[v._v("value")]),v._v(" prop 和 "),t("code",[v._v("input")]),v._v(" 事件，或依赖 Babel 插件进行转换。代码通常类似："),t("code",[v._v("<Input value={this.value} onInput={e => this.value = e.target.value} />")])]),v._v(" "),t("td",{attrs:{align:"left"}},[t("strong",[v._v("简单直观")]),v._v("。遵循 "),t("code",[v._v("modelValue")]),v._v(" prop 和 "),t("code",[v._v("onUpdate:modelValue")]),v._v(" 事件的约定即可。Vue 3 的 JSX 转换也内置了对 "),t("code",[v._v("v-model")]),v._v(" 的语法糖支持。")])]),v._v(" "),t("tr",[t("td",{attrs:{align:"left"}},[t("strong",[v._v("插槽 (Slots)")])]),v._v(" "),t("td",{attrs:{align:"left"}},[v._v("通过 "),t("code",[v._v("this.$slots")]),v._v(" 访问普通插槽，"),t("code",[v._v("this.$scopedSlots")]),v._v(" 访问作用域插槽。API 分裂，容易混淆。")]),v._v(" "),t("td",{attrs:{align:"left"}},[v._v("统一通过 "),t("code",[v._v("setup")]),v._v(" 的 "),t("code",[v._v("context.slots")]),v._v(" 或 "),t("code",[v._v("useSlots()")]),v._v(" API 访问，API 一致且类型支持更好。在 JSX 中调用就像一个函数："),t("code",[v._v("slots.default()")]),v._v(" 或 "),t("code",[v._v("slots.header({ scopeValue })")]),v._v("。")])]),v._v(" "),t("tr",[t("td",{attrs:{align:"left"}},[t("strong",[v._v("事件处理")])]),v._v(" "),t("td",{attrs:{align:"left"}},[v._v("事件需要写在 "),t("code",[v._v("on")]),v._v(" 对象中，如 "),t("span",{pre:!0},[t("code",[v._v("on={{ click: this.handleClick }}")])]),v._v("。原生DOM事件则需要 "),t("code",[v._v("nativeOn")]),v._v("。")]),v._v(" "),t("td",{attrs:{align:"left"}},[t("strong",[v._v("与原生 HTML/React 一致")]),v._v("。事件直接以 "),t("code",[v._v("on")]),v._v(" 前缀作为 prop 写入，如 "),t("code",[v._v("<button onClick={handleClick}></button>")]),v._v("。")])]),v._v(" "),t("tr",[t("td",{attrs:{align:"left"}},[t("strong",[v._v("类型支持")])]),v._v(" "),t("td",{attrs:{align:"left"}},[v._v("相对薄弱，尤其在 Props、事件和插槽的类型推导上，往往需要开发者编写大量手动的类型定义和断言。")]),v._v(" "),t("td",{attrs:{align:"left"}},[t("strong",[v._v("非常完善")]),v._v("。得益于 Composition API 和更强大的 TS 集成，Props、Emits、Slots 都能获得开箱即用的、精确的类型推断。")])])])]),v._v(" "),t("p",[t("strong",[v._v("小结")]),v._v("：Vue 3 的 TSX 开发体验"),t("strong",[v._v("远胜于")]),v._v(" Vue 2。它更现代化、类型支持更完善、心智模型也与 Composition API 高度统一，真正让 TSX 成为了一个在 Vue 生态中实用且强大的选项。")]),v._v(" "),t("hr"),v._v(" "),t("h2",{attrs:{id:"_3-性能考量-模板编译优化-vs-tsx"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-性能考量-模板编译优化-vs-tsx"}},[v._v("#")]),v._v(" 3. 性能考量：模板编译优化 vs TSX")]),v._v(" "),t("p",[v._v("选择 TSX，实际上也意味着在一定程度上放弃了 Vue 模板编译器所带来的大部分自动性能优化。这是一个重要的权衡。")]),v._v(" "),t("h3",{attrs:{id:"vue-模板的优化魔法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-模板的优化魔法"}},[v._v("#")]),v._v(" Vue 模板的优化魔法")]),v._v(" "),t("p",[v._v("Vue 的编译器非常智能，它在编译时会对模板进行静态分析，并植入多种优化策略，将模板转换成一个高度优化的渲染函数。")]),v._v(" "),t("ol",[t("li",[t("p",[t("strong",[v._v("静态提升 (Static Hoisting)")]),v._v(": 编译器会找到模板中所有静态不变的元素或属性，将它们的 VNode 创建过程提升到渲染函数之外。这意味着它们只会被创建一次，在后续的无数次重新渲染中都会被直接复用，完全跳过了 diff 过程。")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("补丁标志 (Patch Flags)")]),v._v(": 对于动态的节点（例如，有动态绑定的 class 或文本内容），编译器会给它们打上“补丁标志”。这个标志精确地告诉运行时（runtime）这个节点只会发生哪种类型的变化（如 "),t("code",[v._v("PatchFlags.TEXT")]),v._v(" 或 "),t("code",[v._v("PatchFlags.CLASS")]),v._v("）。在更新时，Vue 无需对节点进行完整的属性比对，而是“靶向”更新被标记的部分，效率极高。")])])]),v._v(" "),t("p",[v._v("简单来说，Vue 模板编译器给运行时留下了一份详细的“作弊条”，让更新过程可以跳过大量不必要的比对工作。")]),v._v(" "),t("h3",{attrs:{id:"tsx-的手动挡模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tsx-的手动挡模式"}},[v._v("#")]),v._v(" TSX 的手动挡模式")]),v._v(" "),t("p",[v._v("当您使用 TSX 时，Babel 或 TypeScript 只是简单地将其转换为一系列的 "),t("code",[v._v("h()")]),v._v(" 函数调用（用于创建 VNode）。")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("缺乏静态分析")]),v._v(": 从编译器的角度看，所有的 "),t("code",[v._v("h()")]),v._v(" 调用都是动态的。它无法预知你传入的参数是静态还是动态，因此无法进行静态提升或添加补丁标志。")]),v._v(" "),t("li",[t("strong",[v._v("全量 Diff")]),v._v(": 在每次组件重新渲染时，都需要完整地执行渲染函数，生成一棵全新的 VNode 树。运行时只能对新旧两棵树进行一次传统的、全量的 VNode diff，来找出差异。")])]),v._v(" "),t("h3",{attrs:{id:"结论与权衡"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#结论与权衡"}},[v._v("#")]),v._v(" 结论与权衡")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("特性")]),v._v(" "),t("th",[v._v("Vue 模板 (SFC)")]),v._v(" "),t("th",[v._v("Vue + TSX")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[t("strong",[v._v("优化策略")])]),v._v(" "),t("td",[t("strong",[v._v("编译时自动优化")]),v._v("：编译器深度分析，给运行时提供“捷径”。")]),v._v(" "),t("td",[t("strong",[v._v("运行时优化")]),v._v("：主要依赖 VNode diff 算法。")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("静态提升")])]),v._v(" "),t("td",[v._v("✅ "),t("strong",[v._v("自动")])]),v._v(" "),t("td",[v._v("❌ "),t("strong",[v._v("手动")]),v._v(" (需开发者自行将常量移出渲染函数)")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("补丁标志")])]),v._v(" "),t("td",[v._v("✅ "),t("strong",[v._v("自动")])]),v._v(" "),t("td",[v._v("❌ "),t("strong",[v._v("无")]),v._v(" (运行时需进行更全面的节点比对)")])]),v._v(" "),t("tr",[t("td",[t("strong",[v._v("开发者角色")])]),v._v(" "),t("td",[v._v("专注于业务逻辑，将性能优化的大部分工作交给编译器。")]),v._v(" "),t("td",[v._v("需要承担更多优化责任，通过 "),t("code",[v._v("useMemo")]),v._v(" 等方式手动控制。")])])])]),v._v(" "),t("p",[t("strong",[v._v("核心权衡")]),v._v("：使用 TSX 是用“"),t("strong",[v._v("放弃一部分自动优化")]),v._v("”来换取“"),t("strong",[v._v("获得完全的编程控制力")]),v._v("”。")]),v._v(" "),t("p",[v._v("对于绝大多数应用，这种性能差异微乎其微，真正的性能瓶颈往往在别处。因此，技术选型应更多地基于"),t("strong",[v._v("项目复杂度")]),v._v("、"),t("strong",[v._v("开发体验")]),v._v("和"),t("strong",[v._v("团队熟悉度")]),v._v("，而不是单纯地纠结于理论上的性能差异。")]),v._v(" "),t("hr"),v._v(" "),t("h2",{attrs:{id:"_4-面试场景剖析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-面试场景剖析"}},[v._v("#")]),v._v(" 4. 面试场景剖析")]),v._v(" "),t("p",[v._v("在面试中，面试官通过此问题通常想考察你对技术的"),t("strong",[v._v("深度理解")]),v._v("、"),t("strong",[v._v("选型决策能力")]),v._v("以及"),t("strong",[v._v("实际应用经验")]),v._v("。")]),v._v(" "),t("h4",{attrs:{id:"问题一-为什么你的项目中要引入-tsx-是基于什么考虑"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#问题一-为什么你的项目中要引入-tsx-是基于什么考虑"}},[v._v("#")]),v._v(" 问题一：“为什么你的项目中要引入 TSX？是基于什么考虑？”")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("解题思路")]),v._v(": "),t("strong",[v._v("切忌泛泛而谈“因为灵活”")]),v._v("。必须结合具体的项目场景，展现你的决策依据。")]),v._v(" "),t("li",[t("strong",[v._v("优秀回答")]),v._v("：“在我们的项目中，大部分组件仍然使用 Vue 的单文件组件（SFC），因为它开发效率高且 "),t("code",[v._v("scoped CSS")]),v._v(" 非常方便。但我们在一些特定场景下引入了 TSX，最典型的是"),t("strong",[v._v("一个动态表单/属性配置面板的组件")]),v._v("。这个组件需要根据传入的 Schema（一份 JSON 配置），动态地渲染出完全不同的表单项组合（输入框、下拉选择、颜色选择器等）。这种高度动态化的渲染逻辑，如果用 "),t("code",[v._v("v-if/v-else-if")]),v._v(" 会导致模板非常冗长且难以维护。而使用 TSX，我们可以利用 "),t("code",[v._v("map")]),v._v(" 和 "),t("code",[v._v("switch")]),v._v(" 等原生 JS 语法，以一种更编程化、更清晰的方式来构建视图。同时，TSX 提供的端到端类型安全也保证了这种复杂组件的健壮性。”")])]),v._v(" "),t("h4",{attrs:{id:"问题二-你在-tsx-里是怎么实现组件的双向绑定-类似-v-model-的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#问题二-你在-tsx-里是怎么实现组件的双向绑定-类似-v-model-的"}},[v._v("#")]),v._v(" 问题二：“你在 TSX 里是怎么实现组件的双向绑定（类似 "),t("code",[v._v("v-model")]),v._v("）的？”")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("解题思路")]),v._v(": 考察你是否真的有实践经验。能清晰地说出 Vue 3 的约定是加分项。")]),v._v(" "),t("li",[t("strong",[v._v("优秀回答")]),v._v("：“在 Vue 3 的 TSX 中，我们遵循官方的 "),t("code",[v._v("modelValue")]),v._v(" 和 "),t("code",[v._v("onUpdate:modelValue")]),v._v(" 事件约定来实现双向绑定。父组件通过 "),t("code",[v._v("modelValue")]),v._v(" prop 将值传递给子组件，并监听 "),t("code",[v._v("onUpdate:modelValue")]),v._v(" 事件来接收值的更新。在子组件内部，我们接收 "),t("code",[v._v("modelValue")]),v._v(" prop 来显示值，当值需要改变时，通过 "),t("code",[v._v("emit('update:modelValue', newValue)")]),v._v(" 来通知父组件。这套机制保证了单向数据流的清晰，并且可以得到完整的 TypeScript 类型支持。”")])]),v._v(" "),t("h4",{attrs:{id:"问题三-既然-tsx-这么灵活-为什么不把项目全部用-tsx-来写呢"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#问题三-既然-tsx-这么灵活-为什么不把项目全部用-tsx-来写呢"}},[v._v("#")]),v._v(" 问题三：“既然 TSX 这么灵活，为什么不把项目全部用 TSX 来写呢？”")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("解题思路")]),v._v(": 考察你对技术选型的权衡能力（Trade-offs），展现你作为工程师的理性和成熟度。")]),v._v(" "),t("li",[t("strong",[v._v("优秀回答")]),v._v("：“这是一个很好的问题。我们选择混合使用模板和 TSX，而不是全盘 TSX，主要基于以下几点权衡：\n"),t("ol",[t("li",[t("strong",[v._v("开发效率与简洁性")]),v._v(": 对于大量结构固定、逻辑简单的纯展示组件，Vue 模板的语法更简洁，开发效率更高。")]),v._v(" "),t("li",[t("strong",[v._v("样式方案")]),v._v(": 我们团队非常依赖 "),t("code",[v._v("scoped CSS")]),v._v(" 来保证样式的隔离性，这是 TSX 文件不具备的能力。引入 CSS-in-JS 等方案会增加额外的工程复杂度和团队学习成本。")]),v._v(" "),t("li",[t("strong",[v._v("生态与团队习惯")]),v._v(": Vue 的生态系统（如各种 UI 库）仍然是以模板为中心的。保持主流方案可以降低维护成本，也更符合团队大多数成员的开发习惯。\n我们的技术选型原则是："),t("strong",[v._v("用最适合的工具解决最适合的问题，而不是为了用某个技术而用它")]),v._v("。”")])])])])])}),[],!1,null,null,null);t.default=s.exports}}]);